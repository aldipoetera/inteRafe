% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createFilterObserver.R
\name{createFilterObserver}
\alias{createFilterObserver}
\title{Create a Cross-Filtering Shiny Observer for ggiraph Plots}
\usage{
createFilterObserver(
  input,
  plot_id,
  main_data,
  id_col,
  reactive_data,
  filter_column = NULL
)
}
\arguments{
\item{input}{The \code{input} object from the Shiny server function.}

\item{plot_id}{A character string: the \code{outputId} of the \code{girafeOutput}
that this observer should listen to.}

\item{main_data}{The full, unfiltered dataframe to use for lookups.}

\item{id_col}{<\code{\link[rlang:args_data_masking]{data-masking}}> The unquoted column name in \code{main_data} that
contains the unique identifier for each row (e.g., car_name).}

\item{reactive_data}{The \code{reactiveVal} object that holds the state of the
selected \code{id_col} values. This is the reactive that will be updated by
the observer.}

\item{filter_column}{A character vector specifying the column(s) used for
filtering in the plot.
\itemize{
\item \code{NULL} (default): Assumes the plot's \code{data_id} directly
provides the values from \code{id_col} (e.g., a scatter plot).
\item \code{character(1)}: A single column name. Used for simple bar
charts where the selection is a category in this column.
\item \code{character(n)}: Multiple column names. Used for complex
plots (e.g., stacked bars) where a composite ID column must be
looked up. The name of this composite ID column in \code{main_data} is
assumed to be the \code{filter_column} names pasted together with an
underscore (e.g., "cyl_gear").
}}
}
\value{
This function does not return a value. It is called for its side
effect of creating a Shiny observer.
}
\description{
This function sets up a Shiny observer that listens for selection events
from a ggiraph plot. When a selection is made, it filters a dataset to
find the corresponding unique identifiers and updates a reactiveVal by
finding the intersection with the currently selected identifiers.
}
\examples{
\dontrun{
# Inside your Shiny server function:

# 1. Define your reactive state
selected_cars <- reactiveVal(mtcars_data$car_name)

# 2. Call the function to create the observer for a plot
createFilterObserver(
  input = input,
  plot_id = "gear_plot",
  main_data = mtcars_data,
  id_col = car_name,
  reactive_data = selected_cars,
  filter_column = "gear"
)
}
}
